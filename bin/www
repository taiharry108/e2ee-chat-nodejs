#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app')
const debug = require('debug')('message-app-backend:server')
const http = require('http')
const Message = require('../model/messages')
const TopManager = require('../model/top-manager')

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)
const io = require('socket.io')(server)
const uuidv1 = require('uuid/v1')
const tm = new TopManager(io)

const getChatroomKey = (client) => 'chatroomKey' in client.handshake.query ? client.handshake.query.chatroomKey : 'default'

io.on('connection', (client) => {
  console.log('user connected', client.handshake.address);
  client.emit('CONNECTED');
  let username = client.handshake.query.username;
  let userid = client.handshake.query.userid;

  client.on('SEND_MSG', (msg) => {
    console.log('received new message ', msg.textContent);
    let chatroomKey = getChatroomKey(client);
    tm.sendMsg(chatroomKey, msg, client);
  })

  client.on('SEND_KEY', (pubKey) => {

    let chatroomKey = getChatroomKey(client);
    console.log('received keys {', pubKey,'} from client', userid, ' at ', chatroomKey);
    tm.addClientToChat(chatroomKey, client, username, pubKey, userid);
    tm.sendRoomInfoToClient(client, chatroomKey, userid);
    tm.updateRoomInfoToOtherClients(client, chatroomKey, userid, true, username);
  })

  client.on('BROADCAST_AES', (encryptedAESKeys) => {
    let chatroomKey = getChatroomKey(client);
    tm.broadcastAESKey(chatroomKey, encryptedAESKeys)
  })

  client.on('disconnect', (msg) => {
    let chatroomKey = getChatroomKey(client);
    let userid = client.handshake.query.userid;
    console.log('user from ', chatroomKey,' disconnected', userid);
    tm.removeClientFromChat(chatroomKey, userid);
    tm.updateRoomInfoToOtherClients(client, chatroomKey, userid, false, username);
  })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
